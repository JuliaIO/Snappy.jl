using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libsnappy"], :libsnappy),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/davidanthoff/SnappyBuilder/releases/download/v1.1.7+build.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/Snappy.aarch64-linux-gnu.tar.gz", "6ca600613574b944268e10b2be15da0755af928b023e9af4341697f5e514aa88"),
    BinaryProvider.Linux(:aarch64, :musl, :blank_abi) => ("$bin_prefix/Snappy.aarch64-linux-musl.tar.gz", "41282fe50b4af3b583d818243ae1c64a522ef83c408e1d0050863c47138aec57"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Snappy.arm-linux-gnueabihf.tar.gz", "c611e2134a797b66d44fb87ad876cf7d6fa9b10b89171ed59eeec067ce42b92d"),
    BinaryProvider.Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/Snappy.arm-linux-musleabihf.tar.gz", "b317139eb454240aa81a658ef9efaf99c3b7c03ded991f217a6d792b5bcd4162"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/Snappy.i686-linux-gnu.tar.gz", "b85be47f38b4c7cc4471436e1749b92281545acac4d684d600aad05597c595f6"),
    BinaryProvider.Linux(:i686, :musl, :blank_abi) => ("$bin_prefix/Snappy.i686-linux-musl.tar.gz", "749ce9b3051304ea41b8a3cb14750c45b6f4b5af62ced488501553056f0e542c"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/Snappy.i686-w64-mingw32.tar.gz", "319a4dfb66790758259bedb625dd4b5460bbb5a470268bfea54444a93f38f5d0"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/Snappy.powerpc64le-linux-gnu.tar.gz", "f63a9a32d222747bc61df15fb0320ac51fe5c3daa8bc191ab6487b7a5bbdfd4e"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Snappy.x86_64-apple-darwin14.tar.gz", "ca64d24ec71f4e0cb74931f88d95d16703fb91f375d1a29bec2ef9a5b91310cc"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/Snappy.x86_64-linux-gnu.tar.gz", "e31bc3712b420cb1b991d0857973f453d20047993952146f8ef978a9a9e4d2c8"),
    BinaryProvider.Linux(:x86_64, :musl, :blank_abi) => ("$bin_prefix/Snappy.x86_64-linux-musl.tar.gz", "8b7aed9f9d083570f9031687b3c63a699f18c3144ebff276f561dc1ea050a846"),
    BinaryProvider.FreeBSD(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Snappy.x86_64-unknown-freebsd11.1.tar.gz", "02279e91f71a7d1974175843b37ea6b5341f9e64793cd3a70cc4ef7dec977ab9"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Snappy.x86_64-w64-mingw32.tar.gz", "d76494fa29441144f2195721ac653e7ad56ea1ae852236456429957980c59ba3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
